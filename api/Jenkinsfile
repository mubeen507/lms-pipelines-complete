pipeline {
    agent {
        node {
            label 'slave'
        }
    }
    environment {
        dockerhub = credentials('dockerhub')
        deployBranch = 'main' // define your branch here
        deployService = 'api-service' // define your service here
    }
    stages {
        stage('slack-notification') {
            steps {
                slackSend channel: 'devops',
                    color: '439FE0',
                    message: "started ${JOB_NAME} ${BUILD_NUMBER} (<${BUILD_URL}|Open>)",
                    teamDomain: 'dl-mubeenworkspace',
                    tokenCredentialId: 'slack',
                    username: 'jenkins'
            }
        }
        stage('Sonar Analysis') {
            steps {
               sh 'cd api && docker run --rm -e SONAR_HOST_URL="http://3.91.188.65:9000" -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=lms-be" -e SONAR_TOKEN="sqp_cb2811fb704f063961cacf2c7136faeca45ba6b8" -v ".:/usr/src" sonarsource/sonar-scanner-cli'
          }
        }
        stage('Approval') {
            steps {
                emailext subject: "Deployment Approval for $deployBranch branch and $deployService service",
                    body: "<a href='${JENKINS_URL}/job/${JOB_NAME}/${BUILD_NUMBER}/input'>click to approve</a>",
                    to: 'mubeen@gmail.com',
                    mimeType: 'text/html',
                    attachLog: true
                script {
                    def Delay = input id: 'Deploy',
                        message: sh(script: '''echo "You are DEPLOYING -->$deployBranch<-- IN PRODUCTION"''', returnStdout: true).trim(),
                        submitter: 'uaserID1, userID2',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition',
                                choices: ['no', 'yes'].join('\n'),
                                name: 'input',
                                description: 'Please Select "YES" to Build or "NO" to Abort']
                        ]
                    echo "The answer is: ${Delay}"
                    if ("${Delay}" == "yes") {
                        sh '''echo "Deploying in prod"'''
                    } else {
                        sh """
                        echo "exiting not production ready branch"
                        exit 1
                        """
                    }
                }
            }
        }

        stage('Remove Old Deployment') {
            steps {
                sh 'docker container rm -f backend'
                sh 'docker rmi mubeen507/api:latest'
            }
        }
        stage('Build') {
            steps {
                script {
                    // Get the Jenkins build number
                    def buildNumber = env.BUILD_NUMBER

                    // Build the Docker image with a tag including the build number
                    sh "cd api && docker build -t mubeen507/api:${buildNumber} ."

                    // Tag the new image as latest
                    sh "docker tag mubeen507/api:${buildNumber} mubeen507/api:latest"
                }
            }
        }
        stage('Image Scanning') {
            steps {
                script {
                    // Get the Jenkins build number
                    def buildNumber = env.BUILD_NUMBER
                    sh "trivy image mubeen507/api:${buildNumber}"
                }
            }
        }
        stage('Docker Login') {
            steps {
                sh 'echo $dockerhub_PSW | docker login -u $dockerhub_USR --password-stdin'
            }
        }

        stage('Push Image to DockerHub') {
            steps {
                script {
                    // Get the Jenkins build number
                    def buildNumber = env.BUILD_NUMBER

                    sh "docker push mubeen507/api:${buildNumber}"
                    sh "docker push mubeen507/api:latest"
                    sh "docker rmi mubeen507/api:${buildNumber}"
                }
            }
        }
        stage('Deployment') {
            steps {
                sh 'docker run -dt --network lmsnetwork --name backend -p 8080:8080 mubeen507/api:latest'
            }
        }
        stage('Deployment-Status') {
            steps {
                sh 'ss -ntpl'
                echo 'deployment done successfully'
            }
        }
    }
}
